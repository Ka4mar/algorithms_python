"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в
виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import timeit
import random


def bubble_sort(lst_obj):
    n = 1

    while n < len(lst_obj):
        d = 0
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                d += 1
        if d == 0:
            break

        n += 1
    return lst_obj


# замеры 10

orig_list = [random.randint(-100, 100) for _ in range(10)]
print(orig_list)
print(bubble_sort(orig_list))


print(
    timeit.timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

# замеры 100

orig_list2 = [random.randint(-100, 100) for _ in range(100)]


print(
    timeit.timeit(
        "bubble_sort(orig_list2[:])",
        globals=globals(),
        number=1000))


# замеры 1000

orig_list3 = [random.randint(-100, 100) for _ in range(1000)]
print(
    timeit.timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))


"""
0.009131200000000006
0.7685486
106.773521


[72, -30, -60, -62, 83, -7, -68, 84, -84, -47]
[84, 83, 72, -7, -30, -47, -60, -62, -68, -84]
0.0022999909999999978
1.09932727
106.774142933
Добавил переменную которая изменяяе своё значение в зависимости от того была ли сортировка при переборе или нет
при небольшом количестве элементов получилось быстрее с проверккой а при увеличение элеметов в массиве 
скорость падает потому что шансы нужной последовательности элементов для прекращения в разы становятся меньше
"""